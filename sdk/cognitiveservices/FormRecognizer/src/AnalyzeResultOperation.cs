// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.AI.FormRecognizer.Models;
using System.Text.Json;

namespace Azure.AI.FormRecognizer
{
    /// <summary>
    /// Disposable operation object for AnalyzeResult which generated by service method of FormRecognizerClient.
    /// </summary>
    public class AnalyzeResultOperation : Operation<AnalyzeResult>
    {
        private static readonly TimeSpan s_defaultPollingInterval = TimeSpan.FromSeconds(1);
        private readonly FormRecognizerHttpPipeline _formRecognizerPipeline;
        private readonly Uri _operationLocation;

        private Response _response;
        private AnalyzeOperationResult _operationResult;
        private bool _hasCompleted;

        /// <inheritdoc/>
        public override string Id => _operationLocation.ToString();

        /// <inheritdoc/>
        public override AnalyzeResult Value => _operationResult?.AnalyzeResult;

        /// <inheritdoc/>
        public override bool HasCompleted => _hasCompleted;

        /// <inheritdoc/>
        public override bool HasValue => (Value != null);


        internal AnalyzeResultOperation(FormRecognizerHttpPipeline formRecognizerPipeline, Uri operationLocation)
        {
            _formRecognizerPipeline = formRecognizerPipeline;
            _operationLocation = operationLocation;
        }

        /// <inheritdoc/>
        public override Response GetRawResponse()
        {
            return _response;
        }

        /// <inheritdoc/>
        public override ValueTask<Response<AnalyzeResult>> WaitForCompletionAsync(CancellationToken cancellationToken = default) =>
            WaitForCompletionAsync(s_defaultPollingInterval, cancellationToken);

        /// <inheritdoc/>
        public override ValueTask<Response<AnalyzeResult>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =>
            this.DefaultWaitForCompletionAsync(pollingInterval, cancellationToken);

        /// <inheritdoc/>
        public override Response UpdateStatus(CancellationToken cancellationToken = default)
        {
            return UpdateStatusAsync().Result;
        }

        /// <inheritdoc/>
        public override async ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default)
        {
            if (!_hasCompleted)
            {
                using var request = _formRecognizerPipeline.CreateRequest();
                request.Uri.Reset(_operationLocation);
                request.Method = RequestMethod.Get;
                _response = await _formRecognizerPipeline.SendRequestAsync(request, cancellationToken).ConfigureAwait(false);
                _hasCompleted = CheckCompleted(_response);
            }
            return GetRawResponse();
        }

        private bool CheckCompleted(Response response)
        {
            switch (response.Status)
            {
                case 200:
                    {
                        using var reader = new StreamReader(response.ContentStream);
                        _operationResult = JsonSerializer.Deserialize<AnalyzeOperationResult>(reader.ReadToEnd(), FormRecognizerSerializer._defaultOptions);
                        return (_operationResult.Status != OperationStatus.NotStarted && _operationResult.Status != OperationStatus.Running);
                    }
                default:
                    throw response.CreateRequestFailedException();
            }
        }
    }
}
