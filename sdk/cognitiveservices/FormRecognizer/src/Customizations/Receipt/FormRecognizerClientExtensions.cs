// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.FormRecognizer
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;
    using System;
    using System.IO;

    /// <summary>
    /// Extension methods for FormRecognizerClient.
    /// </summary>
    public static partial class FormRecognizerClientExtensions
    {
        //public static async Task<AnalyzeOperationResult> AnalyzeWithCustomModelAsync(this IFormRecognizerClient operations, System.Guid modelId, bool? includeTextDetails = false, object fileStream = default(object), CancellationToken cancellationToken = default(CancellationToken))
        //{
        //    var header = await AnalyzeWithCustomModelAsyncAsync(operations, modelId, includeTextDetails, fileStream, cancellationToken);
        //    var match = Regex.Match(header.OperationLocation, @"([0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12})");
        //    if (match.Success)
        //    {
        //        int retryTimeframe = 1;
        //        for (int retryCount = 5; retryCount > 0; retryCount--)
        //        {
        //            var body = await GetAnalyzeFormResultAsync(operations, modelId, new Guid(match.Groups[2].ToString()), cancellationToken);
        //            if (body.Status.ToSerializedValue() == "succeeded ")
        //            {
        //                return body;
        //            }
        //            Thread.Sleep(TimeSpan.FromSeconds(retryTimeframe));
        //            retryTimeframe *= 2;
        //        }
        //        throw new ErrorResponseException("Timeout.");
        //    }
        //    throw new ArgumentException("Invalid URL.");
        //}

        public static async Task<AnalyzeOperationResult> AnalyzeReceiptAsync(this IFormRecognizerClient operations, Uri uri, int retryTimes = 5, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.AnalyzeReceiptWithHttpMessagesAsync(uri, null, cancellationToken).ConfigureAwait(false))
            {
                var header = _result.Headers;
                var guid = GetGuid(header.OperationLocation);
                return await operations.PollingResultAsync(guid, AnalyzeType.Receipt, retryTimes, cancellationToken);
            }
        }

        public static async Task<AnalyzeOperationResult> AnalyzeReceiptAsync(this IFormRecognizerClient operations, Stream fileStream, int retryTimes = 5, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.AnalyzeReceiptWithHttpMessagesAsync(fileStream, null, cancellationToken).ConfigureAwait(false))
            {
                var header = _result.Headers;
                var guid = GetGuid(header.OperationLocation);
                return await operations.PollingResultAsync(guid, AnalyzeType.Receipt, retryTimes, cancellationToken);
            }
        }

        public static async Task<AnalyzeOperationResult> AnalyzeReceiptAsync(this IFormRecognizerClient operations, byte[] byteArray, int retryTimes = 5, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.AnalyzeReceiptWithHttpMessagesAsync(byteArray, null, cancellationToken).ConfigureAwait(false))
            {
                var header = _result.Headers;
                var guid = GetGuid(header.OperationLocation);
                return await operations.PollingResultAsync(guid, AnalyzeType.Receipt, retryTimes, cancellationToken);
            }
        }

        /// <summary>
        /// Get Analyze Receipt Result
        /// </summary>
        /// <remarks>
        /// Track the progress and obtain the result of the analyze receipt operation.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resultId'>
        /// Analyze operation result identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<AnalyzeOperationResult> GetAnalyzeReceiptResultAsync(this IFormRecognizerClient operations, System.Guid resultId, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetAnalyzeReceiptResultWithHttpMessagesAsync(resultId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
